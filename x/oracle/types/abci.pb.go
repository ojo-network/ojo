// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/oracle/v1/abci.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OracleVoteExtension defines the vote extension structure used by the oracle
// module.
type OracleVoteExtension struct {
	Height        int64                                       `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ExchangeRates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=exchange_rates,json=exchangeRates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"exchange_rates"`
}

func (m *OracleVoteExtension) Reset()         { *m = OracleVoteExtension{} }
func (m *OracleVoteExtension) String() string { return proto.CompactTextString(m) }
func (*OracleVoteExtension) ProtoMessage()    {}
func (*OracleVoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_a17fd58ec0319b85, []int{0}
}
func (m *OracleVoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleVoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleVoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleVoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleVoteExtension.Merge(m, src)
}
func (m *OracleVoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *OracleVoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleVoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_OracleVoteExtension proto.InternalMessageInfo

// InjectedVoteExtensionTx defines the vote extension tx injected by the prepare
// proposal handler.
type InjectedVoteExtensionTx struct {
	ExchangeRateVotes  []AggregateExchangeRateVote `protobuf:"bytes,1,rep,name=exchange_rate_votes,json=exchangeRateVotes,proto3" json:"exchange_rate_votes"`
	ExtendedCommitInfo []byte                      `protobuf:"bytes,2,opt,name=extended_commit_info,json=extendedCommitInfo,proto3" json:"extended_commit_info,omitempty"`
}

func (m *InjectedVoteExtensionTx) Reset()         { *m = InjectedVoteExtensionTx{} }
func (m *InjectedVoteExtensionTx) String() string { return proto.CompactTextString(m) }
func (*InjectedVoteExtensionTx) ProtoMessage()    {}
func (*InjectedVoteExtensionTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a17fd58ec0319b85, []int{1}
}
func (m *InjectedVoteExtensionTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InjectedVoteExtensionTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InjectedVoteExtensionTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InjectedVoteExtensionTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectedVoteExtensionTx.Merge(m, src)
}
func (m *InjectedVoteExtensionTx) XXX_Size() int {
	return m.Size()
}
func (m *InjectedVoteExtensionTx) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectedVoteExtensionTx.DiscardUnknown(m)
}

var xxx_messageInfo_InjectedVoteExtensionTx proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OracleVoteExtension)(nil), "ojo.oracle.v1.OracleVoteExtension")
	proto.RegisterType((*InjectedVoteExtensionTx)(nil), "ojo.oracle.v1.InjectedVoteExtensionTx")
}

func init() { proto.RegisterFile("ojo/oracle/v1/abci.proto", fileDescriptor_a17fd58ec0319b85) }

var fileDescriptor_a17fd58ec0319b85 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xe3, 0x5d, 0xb4, 0x87, 0xc0, 0x22, 0x91, 0x5d, 0x41, 0x54, 0x21, 0x6f, 0xb5, 0xa7,
	0x20, 0xb4, 0x36, 0x65, 0x9f, 0x80, 0x2e, 0x08, 0xf5, 0x84, 0x14, 0x21, 0x0e, 0x1c, 0x88, 0x12,
	0x67, 0xea, 0x38, 0x25, 0x9e, 0x2a, 0x36, 0x25, 0xbc, 0x05, 0x6f, 0x81, 0x04, 0x2f, 0xd2, 0x63,
	0x8f, 0x9c, 0xf8, 0xd3, 0xbe, 0x08, 0x72, 0xfe, 0x08, 0xc2, 0x29, 0x93, 0xf9, 0x3c, 0xdf, 0xfc,
	0xf4, 0x8d, 0x1f, 0x62, 0x89, 0x1c, 0xeb, 0x54, 0xbc, 0x07, 0xbe, 0x99, 0xf1, 0x34, 0x13, 0x8a,
	0xad, 0x6b, 0xb4, 0x18, 0x9c, 0x62, 0x89, 0xac, 0x53, 0xd8, 0x66, 0x36, 0x39, 0x97, 0x28, 0xb1,
	0x55, 0xb8, 0xab, 0xba, 0x47, 0x13, 0x2a, 0xd0, 0x54, 0x68, 0x78, 0x96, 0x1a, 0x37, 0x9f, 0x81,
	0x4d, 0x67, 0x5c, 0xa0, 0xd2, 0xbd, 0x3e, 0x19, 0xdb, 0xf7, 0x76, 0xad, 0x76, 0xf9, 0x85, 0xf8,
	0x67, 0xaf, 0xda, 0xc6, 0x1b, 0xb4, 0xf0, 0xa2, 0xb1, 0xa0, 0x8d, 0x42, 0x1d, 0xdc, 0xf7, 0x4f,
	0x0a, 0x50, 0xb2, 0xb0, 0x21, 0x99, 0x92, 0xe8, 0x38, 0xee, 0xff, 0x82, 0xc6, 0xbf, 0x0b, 0x8d,
	0x28, 0x52, 0x2d, 0x21, 0xa9, 0x53, 0x0b, 0x26, 0x3c, 0x9a, 0x1e, 0x47, 0xb7, 0x9f, 0x3e, 0x64,
	0x1d, 0x04, 0x73, 0x10, 0xac, 0x87, 0x60, 0xcf, 0x41, 0xdc, 0xa0, 0xd2, 0xf3, 0xeb, 0xed, 0x8f,
	0x0b, 0xef, 0xeb, 0xcf, 0x8b, 0xc7, 0x52, 0xd9, 0xe2, 0x43, 0xc6, 0x04, 0x56, 0xbc, 0x87, 0xee,
	0x3e, 0x57, 0x26, 0x5f, 0x71, 0xfb, 0x69, 0x0d, 0x66, 0x98, 0x31, 0xf1, 0xe9, 0xb0, 0x28, 0x76,
	0x7b, 0x2e, 0xbf, 0x11, 0xff, 0xc1, 0x42, 0x97, 0x20, 0x2c, 0xe4, 0x23, 0xd6, 0xd7, 0x4d, 0xf0,
	0xce, 0x3f, 0x1b, 0x51, 0x25, 0x1b, 0x74, 0x68, 0xa4, 0x45, 0x8b, 0xd8, 0x28, 0x44, 0xf6, 0x4c,
	0xca, 0x1a, 0x64, 0xea, 0x1c, 0xfe, 0xfa, 0x3b, 0xc7, 0xf9, 0x2d, 0x87, 0x19, 0xdf, 0x83, 0xff,
	0xfa, 0x26, 0x78, 0xe2, 0x9f, 0x83, 0x5b, 0x97, 0x43, 0x9e, 0x08, 0xac, 0x2a, 0x65, 0x13, 0xa5,
	0x97, 0x18, 0x1e, 0x4d, 0x49, 0x74, 0x27, 0x0e, 0x06, 0xed, 0xa6, 0x95, 0x16, 0x7a, 0x89, 0xf3,
	0x97, 0xdb, 0xdf, 0xd4, 0xdb, 0xee, 0x29, 0xd9, 0xed, 0x29, 0xf9, 0xb5, 0xa7, 0xe4, 0xf3, 0x81,
	0x7a, 0xbb, 0x03, 0xf5, 0xbe, 0x1f, 0xa8, 0xf7, 0xf6, 0xd1, 0x3f, 0x39, 0x60, 0x89, 0x57, 0x1a,
	0xec, 0x47, 0xac, 0x57, 0xae, 0xe6, 0xcd, 0x70, 0xaa, 0x36, 0x8e, 0xec, 0xa4, 0xbd, 0xd3, 0xf5,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x73, 0x9c, 0xa3, 0x24, 0x02, 0x00, 0x00,
}

func (m *OracleVoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleVoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleVoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbci(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintAbci(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InjectedVoteExtensionTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InjectedVoteExtensionTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InjectedVoteExtensionTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedCommitInfo) > 0 {
		i -= len(m.ExtendedCommitInfo)
		copy(dAtA[i:], m.ExtendedCommitInfo)
		i = encodeVarintAbci(dAtA, i, uint64(len(m.ExtendedCommitInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExchangeRateVotes) > 0 {
		for iNdEx := len(m.ExchangeRateVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRateVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbci(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAbci(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbci(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OracleVoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovAbci(uint64(m.Height))
	}
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovAbci(uint64(l))
		}
	}
	return n
}

func (m *InjectedVoteExtensionTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRateVotes) > 0 {
		for _, e := range m.ExchangeRateVotes {
			l = e.Size()
			n += 1 + l + sovAbci(uint64(l))
		}
	}
	l = len(m.ExtendedCommitInfo)
	if l > 0 {
		n += 1 + l + sovAbci(uint64(l))
	}
	return n
}

func sovAbci(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbci(x uint64) (n int) {
	return sovAbci(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OracleVoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleVoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleVoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, types.DecCoin{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InjectedVoteExtensionTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InjectedVoteExtensionTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InjectedVoteExtensionTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRateVotes = append(m.ExchangeRateVotes, AggregateExchangeRateVote{})
			if err := m.ExchangeRateVotes[len(m.ExchangeRateVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCommitInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbci
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedCommitInfo = append(m.ExtendedCommitInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtendedCommitInfo == nil {
				m.ExtendedCommitInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbci(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbci
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbci
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbci
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbci        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbci          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbci = fmt.Errorf("proto: unexpected end of group")
)
