// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/oracle/v1/oracle.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the oracle module.
type Params struct {
	VotePeriod               uint64                      `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty" yaml:"vote_period"`
	VoteThreshold            cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"vote_threshold" yaml:"vote_threshold"`
	RewardBands              RewardBandList              `protobuf:"bytes,3,rep,name=reward_bands,json=rewardBands,proto3,castrepeated=RewardBandList" json:"reward_bands" yaml:"reward_bands"`
	RewardDistributionWindow uint64                      `protobuf:"varint,4,opt,name=reward_distribution_window,json=rewardDistributionWindow,proto3" json:"reward_distribution_window,omitempty" yaml:"reward_distribution_window"`
	AcceptList               DenomList                   `protobuf:"bytes,5,rep,name=accept_list,json=acceptList,proto3,castrepeated=DenomList" json:"accept_list" yaml:"accept_list"`
	SlashFraction            cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction" yaml:"slash_fraction"`
	SlashWindow              uint64                      `protobuf:"varint,7,opt,name=slash_window,json=slashWindow,proto3" json:"slash_window,omitempty" yaml:"slash_window"`
	MinValidPerWindow        cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=min_valid_per_window,json=minValidPerWindow,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_valid_per_window" yaml:"min_valid_per_window"`
	MandatoryList            DenomList                   `protobuf:"bytes,9,rep,name=mandatory_list,json=mandatoryList,proto3,castrepeated=DenomList" json:"mandatory_list" yaml:"mandatory_list"`
	// Historic Stamp Period represents the amount of blocks the oracle
	// module waits before recording a new historic price.
	HistoricStampPeriod uint64 `protobuf:"varint,10,opt,name=historic_stamp_period,json=historicStampPeriod,proto3" json:"historic_stamp_period,omitempty"`
	// Median Stamp Period represents the amount blocks the oracle module
	// waits between calculating and stamping a new median and standard
	// deviation of that median.
	MedianStampPeriod uint64 `protobuf:"varint,11,opt,name=median_stamp_period,json=medianStampPeriod,proto3" json:"median_stamp_period,omitempty"`
	// Maximum Price Stamps represents the maximum amount of historic prices
	// the oracle module will store before pruning via FIFO.
	MaximumPriceStamps uint64 `protobuf:"varint,12,opt,name=maximum_price_stamps,json=maximumPriceStamps,proto3" json:"maximum_price_stamps,omitempty"`
	// Maximum Median Stamps represents the maximum amount of medians the
	// oracle module will store before pruning via FIFO.
	MaximumMedianStamps uint64 `protobuf:"varint,13,opt,name=maximum_median_stamps,json=maximumMedianStamps,proto3" json:"maximum_median_stamps,omitempty"`
	// Currency Pair Providers defines the currency provider pairs the
	// price feeder uses upon start up for pricing data.
	CurrencyPairProviders CurrencyPairProvidersList `protobuf:"bytes,14,rep,name=currency_pair_providers,json=currencyPairProviders,proto3,castrepeated=CurrencyPairProvidersList" json:"currency_pair_providers" yaml:"currency_pair_providers"`
	// Currency Deviation Thresholds defines the deviation thresholds
	// for each base currency the price feeder uses upon start up.
	CurrencyDeviationThresholds CurrencyDeviationThresholdList `protobuf:"bytes,15,rep,name=currency_deviation_thresholds,json=currencyDeviationThresholds,proto3,castrepeated=CurrencyDeviationThresholdList" json:"currency_deviation_thresholds" yaml:"currency_deviation_thresholds"`
	// Price expiry in unix time for elys prices
	PriceExpiryTime uint64 `protobuf:"varint,16,opt,name=price_expiry_time,json=priceExpiryTime,proto3" json:"price_expiry_time,omitempty"`
	// Lifetime of an elys price in blocks
	LifeTimeInBlocks uint64 `protobuf:"varint,17,opt,name=life_time_in_blocks,json=lifeTimeInBlocks,proto3" json:"life_time_in_blocks,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Denom - the object to hold configurations of each denom
type Denom struct {
	BaseDenom   string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	SymbolDenom string `protobuf:"bytes,2,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty" yaml:"symbol_denom"`
	Exponent    uint32 `protobuf:"varint,3,opt,name=exponent,proto3" json:"exponent,omitempty" yaml:"exponent"`
}

func (m *Denom) Reset()      { *m = Denom{} }
func (*Denom) ProtoMessage() {}
func (*Denom) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{1}
}
func (m *Denom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Denom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Denom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Denom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Denom.Merge(m, src)
}
func (m *Denom) XXX_Size() int {
	return m.Size()
}
func (m *Denom) XXX_DiscardUnknown() {
	xxx_messageInfo_Denom.DiscardUnknown(m)
}

var xxx_messageInfo_Denom proto.InternalMessageInfo

// RewardBand - the object to hold the reward band configuration for a given denom.
type RewardBand struct {
	SymbolDenom string                      `protobuf:"bytes,1,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty" yaml:"symbol_denom"`
	RewardBand  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=reward_band,json=rewardBand,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_band" yaml:"reward_band"`
}

func (m *RewardBand) Reset()      { *m = RewardBand{} }
func (*RewardBand) ProtoMessage() {}
func (*RewardBand) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{2}
}
func (m *RewardBand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardBand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardBand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardBand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardBand.Merge(m, src)
}
func (m *RewardBand) XXX_Size() int {
	return m.Size()
}
func (m *RewardBand) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardBand.DiscardUnknown(m)
}

var xxx_messageInfo_RewardBand proto.InternalMessageInfo

// AggregateExchangeRatePrevote -
// struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in SHA256("{salt}:{exchange
// rate}{denom},...,{exchange rate}{denom}:{voter}")
type AggregateExchangeRatePrevote struct {
	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty" yaml:"hash"`
	Voter       string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty" yaml:"voter"`
	SubmitBlock uint64 `protobuf:"varint,3,opt,name=submit_block,json=submitBlock,proto3" json:"submit_block,omitempty" yaml:"submit_block"`
}

func (m *AggregateExchangeRatePrevote) Reset()      { *m = AggregateExchangeRatePrevote{} }
func (*AggregateExchangeRatePrevote) ProtoMessage() {}
func (*AggregateExchangeRatePrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{3}
}
func (m *AggregateExchangeRatePrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateExchangeRatePrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateExchangeRatePrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateExchangeRatePrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateExchangeRatePrevote.Merge(m, src)
}
func (m *AggregateExchangeRatePrevote) XXX_Size() int {
	return m.Size()
}
func (m *AggregateExchangeRatePrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateExchangeRatePrevote.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateExchangeRatePrevote proto.InternalMessageInfo

// AggregateExchangeRateVote - struct for voting on
// the exchange rates of USD denominated in various assets.
type AggregateExchangeRateVote struct {
	ExchangeRates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=exchange_rates,json=exchangeRates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"exchange_rates"`
	Voter         string                                      `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty" yaml:"voter"`
}

func (m *AggregateExchangeRateVote) Reset()      { *m = AggregateExchangeRateVote{} }
func (*AggregateExchangeRateVote) ProtoMessage() {}
func (*AggregateExchangeRateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{4}
}
func (m *AggregateExchangeRateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateExchangeRateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateExchangeRateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateExchangeRateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateExchangeRateVote.Merge(m, src)
}
func (m *AggregateExchangeRateVote) XXX_Size() int {
	return m.Size()
}
func (m *AggregateExchangeRateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateExchangeRateVote.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateExchangeRateVote proto.InternalMessageInfo

// PriceStamp defines a stamp of a denom's exchange rate
// at the block number it was calculated in.
type PriceStamp struct {
	ExchangeRate *types.DecCoin `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	BlockNum     uint64         `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (m *PriceStamp) Reset()         { *m = PriceStamp{} }
func (m *PriceStamp) String() string { return proto.CompactTextString(m) }
func (*PriceStamp) ProtoMessage()    {}
func (*PriceStamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{5}
}
func (m *PriceStamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceStamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceStamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceStamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceStamp.Merge(m, src)
}
func (m *PriceStamp) XXX_Size() int {
	return m.Size()
}
func (m *PriceStamp) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceStamp.DiscardUnknown(m)
}

var xxx_messageInfo_PriceStamp proto.InternalMessageInfo

// ValidatorRewardSet is the set of validators that is earning
// rewards for voting on exchange rates based on their misscounter
// in a given Slash Window. This set gets updated every Slash Window.
type ValidatorRewardSet struct {
	ValidatorSet []string `protobuf:"bytes,1,rep,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty" yaml:"validator_set"`
}

func (m *ValidatorRewardSet) Reset()         { *m = ValidatorRewardSet{} }
func (m *ValidatorRewardSet) String() string { return proto.CompactTextString(m) }
func (*ValidatorRewardSet) ProtoMessage()    {}
func (*ValidatorRewardSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{6}
}
func (m *ValidatorRewardSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorRewardSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorRewardSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorRewardSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRewardSet.Merge(m, src)
}
func (m *ValidatorRewardSet) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorRewardSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRewardSet.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRewardSet proto.InternalMessageInfo

// CurrencyPairProviders defines a list of currency providers for the
// currency pair defined by base and quote.
type CurrencyPairProviders struct {
	BaseDenom               string                `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	QuoteDenom              string                `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty" yaml:"quote_denom"`
	BaseProxyDenom          string                `protobuf:"bytes,3,opt,name=base_proxy_denom,json=baseProxyDenom,proto3" json:"base_proxy_denom,omitempty" yaml:"base_proxy_denom"`
	QuoteProxyDenom         string                `protobuf:"bytes,4,opt,name=quote_proxy_denom,json=quoteProxyDenom,proto3" json:"quote_proxy_denom,omitempty" yaml:"quote_proxy_denom"`
	PoolId                  uint64                `protobuf:"varint,5,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ExternLiquidityProvider string                `protobuf:"bytes,6,opt,name=extern_liquidity_provider,json=externLiquidityProvider,proto3" json:"extern_liquidity_provider,omitempty" yaml:"extern_liquidity_provider"`
	CryptoCompareExchange   string                `protobuf:"bytes,7,opt,name=crypto_compare_exchange,json=cryptoCompareExchange,proto3" json:"crypto_compare_exchange,omitempty" yaml:"crypto_compare_exchange"`
	PairAddress             []PairAddressProvider `protobuf:"bytes,8,rep,name=pair_address,json=pairAddress,proto3" json:"pair_address" yaml:"pair_address"`
	Providers               []string              `protobuf:"bytes,9,rep,name=providers,proto3" json:"providers,omitempty" yaml:"providers"`
}

func (m *CurrencyPairProviders) Reset()      { *m = CurrencyPairProviders{} }
func (*CurrencyPairProviders) ProtoMessage() {}
func (*CurrencyPairProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{7}
}
func (m *CurrencyPairProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyPairProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyPairProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrencyPairProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyPairProviders.Merge(m, src)
}
func (m *CurrencyPairProviders) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyPairProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyPairProviders.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyPairProviders proto.InternalMessageInfo

// PairAddressProvider defines the uniswap pair address and provider
// for uniswap currency pair.
type PairAddressProvider struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	AddressProvider string `protobuf:"bytes,2,opt,name=address_provider,json=addressProvider,proto3" json:"address_provider,omitempty" yaml:"address_provider"`
}

func (m *PairAddressProvider) Reset()         { *m = PairAddressProvider{} }
func (m *PairAddressProvider) String() string { return proto.CompactTextString(m) }
func (*PairAddressProvider) ProtoMessage()    {}
func (*PairAddressProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{8}
}
func (m *PairAddressProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairAddressProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairAddressProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairAddressProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairAddressProvider.Merge(m, src)
}
func (m *PairAddressProvider) XXX_Size() int {
	return m.Size()
}
func (m *PairAddressProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_PairAddressProvider.DiscardUnknown(m)
}

var xxx_messageInfo_PairAddressProvider proto.InternalMessageInfo

// CurrencyDeviationThreshold defines a deviation theshold for a
// base denom.
type CurrencyDeviationThreshold struct {
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Threshold string `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty" yaml:"threshold"`
}

func (m *CurrencyDeviationThreshold) Reset()      { *m = CurrencyDeviationThreshold{} }
func (*CurrencyDeviationThreshold) ProtoMessage() {}
func (*CurrencyDeviationThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{9}
}
func (m *CurrencyDeviationThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyDeviationThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyDeviationThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrencyDeviationThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyDeviationThreshold.Merge(m, src)
}
func (m *CurrencyDeviationThreshold) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyDeviationThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyDeviationThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyDeviationThreshold proto.InternalMessageInfo

// ParamUpdatePlan specifies updates to the Oracle module parameters
// and at which block height they should occur.
type ParamUpdatePlan struct {
	// Store keys of the Oracle params getting updated.
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// The height at which the param update must be performed.
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Changes to the oracle parameters.
	Changes Params `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes"`
}

func (m *ParamUpdatePlan) Reset()      { *m = ParamUpdatePlan{} }
func (*ParamUpdatePlan) ProtoMessage() {}
func (*ParamUpdatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b9fb194216b28f, []int{10}
}
func (m *ParamUpdatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamUpdatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamUpdatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamUpdatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamUpdatePlan.Merge(m, src)
}
func (m *ParamUpdatePlan) XXX_Size() int {
	return m.Size()
}
func (m *ParamUpdatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamUpdatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_ParamUpdatePlan proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "ojo.oracle.v1.Params")
	proto.RegisterType((*Denom)(nil), "ojo.oracle.v1.Denom")
	proto.RegisterType((*RewardBand)(nil), "ojo.oracle.v1.RewardBand")
	proto.RegisterType((*AggregateExchangeRatePrevote)(nil), "ojo.oracle.v1.AggregateExchangeRatePrevote")
	proto.RegisterType((*AggregateExchangeRateVote)(nil), "ojo.oracle.v1.AggregateExchangeRateVote")
	proto.RegisterType((*PriceStamp)(nil), "ojo.oracle.v1.PriceStamp")
	proto.RegisterType((*ValidatorRewardSet)(nil), "ojo.oracle.v1.ValidatorRewardSet")
	proto.RegisterType((*CurrencyPairProviders)(nil), "ojo.oracle.v1.CurrencyPairProviders")
	proto.RegisterType((*PairAddressProvider)(nil), "ojo.oracle.v1.PairAddressProvider")
	proto.RegisterType((*CurrencyDeviationThreshold)(nil), "ojo.oracle.v1.CurrencyDeviationThreshold")
	proto.RegisterType((*ParamUpdatePlan)(nil), "ojo.oracle.v1.ParamUpdatePlan")
}

func init() { proto.RegisterFile("ojo/oracle/v1/oracle.proto", fileDescriptor_e2b9fb194216b28f) }

var fileDescriptor_e2b9fb194216b28f = []byte{
	// 1553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xbd, 0x6f, 0x1b, 0xc9,
	0x15, 0xe7, 0x5a, 0x9f, 0x1c, 0x92, 0xfa, 0x18, 0x49, 0xd6, 0x4a, 0x72, 0xb8, 0xca, 0xc6, 0x49,
	0x64, 0x3b, 0x22, 0x63, 0x39, 0x81, 0x11, 0x21, 0x29, 0xbc, 0x92, 0x9d, 0x18, 0x70, 0x0c, 0x62,
	0xe5, 0x38, 0x80, 0x8b, 0x6c, 0x86, 0xbb, 0x63, 0x72, 0x2c, 0xee, 0xce, 0x7a, 0x66, 0x29, 0x91,
	0x6d, 0xaa, 0x00, 0x69, 0x52, 0xa4, 0x48, 0xe9, 0x74, 0x81, 0xcb, 0x00, 0x01, 0xae, 0xb9, 0xde,
	0xc0, 0x35, 0x2e, 0x0f, 0x57, 0xac, 0xef, 0xec, 0xe6, 0x70, 0x25, 0xff, 0x82, 0xc3, 0x7c, 0x2c,
	0xb9, 0xa4, 0xa9, 0x3b, 0x9f, 0x2b, 0xee, 0xcc, 0xef, 0xbd, 0x37, 0xbf, 0xf9, 0xcd, 0xbc, 0xf7,
	0x86, 0x60, 0x9b, 0x3e, 0xa3, 0x75, 0xca, 0x90, 0xdf, 0xc1, 0xf5, 0xb3, 0x9b, 0xfa, 0xab, 0x16,
	0x33, 0x9a, 0x50, 0x58, 0xa1, 0xcf, 0x68, 0x4d, 0xcf, 0x9c, 0xdd, 0xdc, 0x5e, 0x6f, 0xd1, 0x16,
	0x95, 0x48, 0x5d, 0x7c, 0x29, 0xa3, 0xed, 0xaa, 0x4f, 0x79, 0x48, 0x79, 0xbd, 0x89, 0xb8, 0x88,
	0xd0, 0xc4, 0x09, 0xba, 0x59, 0xf7, 0x29, 0x89, 0x14, 0x6e, 0x7f, 0x53, 0x02, 0xf3, 0x0d, 0xc4,
	0x50, 0xc8, 0xe1, 0x6d, 0x50, 0x3a, 0xa3, 0x09, 0xf6, 0x62, 0xcc, 0x08, 0x0d, 0x4c, 0x63, 0xd7,
	0xd8, 0x9b, 0x75, 0x2e, 0x0f, 0x52, 0x0b, 0xf6, 0x51, 0xd8, 0x39, 0xb4, 0x73, 0xa0, 0xed, 0x02,
	0x31, 0x6a, 0xc8, 0x01, 0xf4, 0xc1, 0x92, 0xc4, 0x92, 0x36, 0xc3, 0xbc, 0x4d, 0x3b, 0x81, 0x79,
	0x69, 0xd7, 0xd8, 0x2b, 0x3a, 0xbf, 0x7d, 0x95, 0x5a, 0x85, 0x2f, 0x52, 0x6b, 0x47, 0x71, 0xe0,
	0xc1, 0x69, 0x8d, 0xd0, 0x7a, 0x88, 0x92, 0x76, 0xed, 0x01, 0x6e, 0x21, 0xbf, 0x7f, 0x8c, 0xfd,
	0x41, 0x6a, 0x6d, 0xe4, 0xc2, 0x0f, 0x43, 0xd8, 0x6e, 0x45, 0x4c, 0x3c, 0xca, 0xc6, 0xf0, 0x14,
	0x94, 0x19, 0x3e, 0x47, 0x2c, 0xf0, 0x9a, 0x28, 0x0a, 0xb8, 0x39, 0xb3, 0x3b, 0xb3, 0x57, 0x3a,
	0xd8, 0xaa, 0x8d, 0x89, 0x50, 0x73, 0xa5, 0x89, 0x83, 0xa2, 0xc0, 0xd9, 0x17, 0xab, 0x0f, 0x52,
	0x6b, 0x4d, 0x85, 0xcf, 0x3b, 0xdb, 0x2f, 0xdf, 0x58, 0x4b, 0x23, 0xd3, 0x07, 0x84, 0x27, 0x6e,
	0x89, 0x0d, 0xc7, 0x1c, 0xfa, 0x60, 0x5b, 0xdb, 0x07, 0x84, 0x27, 0x8c, 0x34, 0xbb, 0x09, 0xa1,
	0x91, 0x77, 0x4e, 0xa2, 0x80, 0x9e, 0x9b, 0xb3, 0x52, 0x99, 0x9f, 0x0e, 0x52, 0xeb, 0xc7, 0x63,
	0xb1, 0xa7, 0xd8, 0xda, 0xae, 0xa9, 0xc0, 0xe3, 0x1c, 0xf6, 0x67, 0x09, 0xc1, 0xbf, 0x80, 0x12,
	0xf2, 0x7d, 0x1c, 0x27, 0x5e, 0x87, 0xf0, 0xc4, 0x9c, 0x93, 0x1b, 0x5a, 0x9f, 0xd8, 0xd0, 0x31,
	0x8e, 0x68, 0xe8, 0xfc, 0x5c, 0xef, 0x45, 0x9f, 0x44, 0xce, 0x4d, 0x6c, 0xa5, 0x28, 0x8d, 0xe4,
	0x2e, 0x80, 0x82, 0xc4, 0xb7, 0x38, 0x16, 0xde, 0x41, 0xbc, 0xed, 0x3d, 0x65, 0xc8, 0x17, 0xeb,
	0x9a, 0xf3, 0x1f, 0x71, 0x2c, 0xe3, 0x21, 0x6c, 0xb7, 0x22, 0x27, 0xee, 0xe9, 0x31, 0x3c, 0x04,
	0x65, 0x65, 0xa1, 0xb5, 0x59, 0x90, 0xda, 0x6c, 0x8e, 0x74, 0xcf, 0xa3, 0xb6, 0x5b, 0x92, 0x43,
	0x2d, 0x00, 0x07, 0xeb, 0x21, 0x89, 0xbc, 0x33, 0xd4, 0x21, 0x81, 0xb8, 0x58, 0x59, 0x8c, 0x45,
	0x49, 0xd3, 0xf9, 0x30, 0x9a, 0x3b, 0x6a, 0x99, 0x69, 0x81, 0x6c, 0x77, 0x35, 0x24, 0xd1, 0x63,
	0x31, 0xdb, 0xc0, 0x4c, 0x2f, 0xda, 0x02, 0x4b, 0x21, 0x8a, 0x02, 0x94, 0x50, 0xd6, 0x57, 0xc2,
	0x17, 0xbf, 0x43, 0xf8, 0xeb, 0x5a, 0x78, 0x2d, 0xc6, 0xb8, 0xe7, 0x84, 0xf6, 0x95, 0x21, 0x2a,
	0xe5, 0x3f, 0x00, 0x1b, 0x6d, 0xc2, 0x13, 0xca, 0x88, 0xef, 0xf1, 0x04, 0x85, 0x71, 0x96, 0x58,
	0x40, 0x48, 0xe4, 0xae, 0x65, 0xe0, 0x89, 0xc0, 0x74, 0x26, 0xd5, 0xc0, 0x5a, 0x88, 0x03, 0x82,
	0xa2, 0x71, 0x8f, 0x92, 0xf4, 0x58, 0x55, 0x50, 0xde, 0xfe, 0x97, 0x60, 0x3d, 0x44, 0x3d, 0x12,
	0x76, 0x43, 0x2f, 0x66, 0xc4, 0xc7, 0xca, 0x8d, 0x9b, 0x65, 0xe9, 0x00, 0x35, 0xd6, 0x10, 0x90,
	0x74, 0xe3, 0x82, 0x55, 0xe6, 0x91, 0x5f, 0x89, 0x9b, 0x15, 0xc5, 0x4a, 0x83, 0x7f, 0x1c, 0x2d,
	0xc5, 0xe1, 0x7f, 0x0c, 0xb0, 0xe9, 0x77, 0x19, 0xc3, 0x91, 0xdf, 0xf7, 0x62, 0x44, 0x98, 0x17,
	0x33, 0x7a, 0x46, 0x02, 0xcc, 0xb8, 0xb9, 0x24, 0xc5, 0xbb, 0x3a, 0x21, 0xde, 0x91, 0xb6, 0x6e,
	0x20, 0xc2, 0x1a, 0x99, 0xad, 0x73, 0xa4, 0xc5, 0xac, 0x2a, 0x31, 0x2f, 0x08, 0x29, 0x54, 0xdd,
	0x9a, 0x1a, 0x40, 0xaa, 0xbc, 0xe1, 0x4f, 0x83, 0xe0, 0xa7, 0x06, 0xf8, 0xd1, 0x30, 0x60, 0x80,
	0xcf, 0x08, 0x92, 0x59, 0x38, 0xac, 0x27, 0xdc, 0x5c, 0x96, 0x4c, 0xaf, 0x5d, 0xc0, 0xf4, 0x38,
	0x73, 0x19, 0x56, 0x1c, 0xe7, 0xa1, 0xa6, 0x7b, 0x75, 0x82, 0xee, 0xb4, 0xe8, 0x82, 0x74, 0xf5,
	0xe2, 0x58, 0x92, 0xf9, 0x8e, 0x7f, 0x21, 0xce, 0xe1, 0x75, 0xb0, 0xaa, 0x4e, 0x10, 0xf7, 0x62,
	0xc2, 0xfa, 0x5e, 0x42, 0x42, 0x6c, 0xae, 0xc8, 0x33, 0x59, 0x96, 0xc0, 0x5d, 0x39, 0xff, 0x88,
	0x84, 0x18, 0xee, 0x83, 0xb5, 0x0e, 0x79, 0x8a, 0xa5, 0x8d, 0x47, 0x22, 0xaf, 0xd9, 0xa1, 0xfe,
	0x29, 0x37, 0x57, 0xa5, 0xf5, 0x8a, 0x80, 0x84, 0xd9, 0xfd, 0xc8, 0x91, 0xf3, 0x87, 0x8b, 0xff,
	0x7e, 0x61, 0x15, 0xbe, 0x7e, 0x61, 0x19, 0xf6, 0x27, 0x06, 0x98, 0x93, 0xf7, 0x15, 0xfe, 0x0a,
	0x00, 0xd1, 0x11, 0xbc, 0x40, 0x8c, 0x64, 0xa9, 0x2f, 0x3a, 0x1b, 0x83, 0xd4, 0x5a, 0x55, 0x7b,
	0x1d, 0x61, 0xb6, 0x5b, 0x14, 0x03, 0xe5, 0x25, 0x92, 0xbd, 0x1f, 0x36, 0x69, 0x47, 0xfb, 0xa9,
	0x32, 0x9f, 0x4f, 0xf6, 0x1c, 0x2a, 0x92, 0x5d, 0x0e, 0x95, 0x6f, 0x1d, 0x2c, 0xe2, 0x5e, 0x4c,
	0x23, 0x1c, 0x25, 0xe6, 0xcc, 0xae, 0xb1, 0x57, 0x71, 0xd6, 0x06, 0xa9, 0xb5, 0xac, 0xfc, 0x32,
	0xc4, 0x76, 0x87, 0x46, 0x87, 0xe5, 0xbf, 0xbf, 0xb0, 0x0a, 0x9a, 0x7a, 0xc1, 0xfe, 0x9f, 0x01,
	0xc0, 0xa8, 0x62, 0xbf, 0xc7, 0xc4, 0xf8, 0x01, 0x4c, 0x9e, 0x80, 0x52, 0xae, 0x19, 0xe8, 0x4d,
	0xfc, 0xe6, 0xc3, 0xaa, 0x0d, 0x7c, 0xaf, 0x99, 0xd8, 0x2e, 0x18, 0x75, 0x8e, 0x09, 0xd2, 0xff,
	0x37, 0xc0, 0x95, 0x3b, 0xad, 0x16, 0xc3, 0x2d, 0x94, 0xe0, 0xbb, 0x3d, 0xbf, 0x8d, 0xa2, 0x16,
	0x76, 0x51, 0x82, 0x1b, 0x0c, 0x8b, 0xee, 0x06, 0x7f, 0x02, 0x66, 0xdb, 0x88, 0xb7, 0x35, 0xfd,
	0xe5, 0x41, 0x6a, 0x95, 0xd4, 0x02, 0x62, 0xd6, 0x76, 0x25, 0x08, 0x7f, 0x06, 0xe6, 0x84, 0x31,
	0xd3, 0x4c, 0x57, 0x06, 0xa9, 0x55, 0x1e, 0xb5, 0x4c, 0x66, 0xbb, 0x0a, 0x96, 0x9a, 0x74, 0x9b,
	0x21, 0x49, 0xd4, 0x85, 0x90, 0x2a, 0x8f, 0x97, 0xe2, 0x1c, 0x2a, 0x34, 0x91, 0x43, 0x79, 0x49,
	0x26, 0x78, 0x7f, 0x66, 0x80, 0xad, 0xa9, 0xbc, 0x1f, 0x0b, 0xd2, 0x3d, 0xb0, 0x84, 0xf5, 0x9c,
	0xc7, 0x50, 0x82, 0xb9, 0x69, 0xc8, 0xd4, 0xba, 0x52, 0x53, 0xda, 0xd5, 0xc4, 0x85, 0xa9, 0xe9,
	0xb7, 0x46, 0xed, 0x18, 0xfb, 0x47, 0x94, 0x44, 0xce, 0x2d, 0x21, 0xf0, 0xcb, 0x37, 0xd6, 0x8d,
	0x16, 0x49, 0xda, 0xdd, 0x66, 0xcd, 0xa7, 0x61, 0x5d, 0xbf, 0x4d, 0xd4, 0xcf, 0x3e, 0x0f, 0x4e,
	0xeb, 0x49, 0x3f, 0xc6, 0x3c, 0xf3, 0xe1, 0x6e, 0x05, 0xe7, 0x16, 0xe7, 0x1f, 0xaa, 0xc4, 0xc4,
	0x6e, 0x3a, 0x00, 0x8c, 0x2a, 0x20, 0xbc, 0x03, 0x2a, 0x63, 0xec, 0xa5, 0xf6, 0xdf, 0x43, 0xde,
	0x2d, 0xe7, 0x79, 0xc0, 0x1d, 0x50, 0x94, 0x1a, 0x7a, 0x51, 0x57, 0xe5, 0xc0, 0xac, 0xbb, 0x28,
	0x27, 0x1e, 0x76, 0x43, 0xfb, 0x04, 0x40, 0xd9, 0x71, 0x44, 0x23, 0x50, 0x17, 0xf6, 0x04, 0x27,
	0xf0, 0x77, 0xa0, 0x72, 0x96, 0xcd, 0x7a, 0x1c, 0x27, 0x52, 0xb2, 0xa2, 0x63, 0x0e, 0x52, 0x6b,
	0x5d, 0xef, 0x20, 0x0f, 0xdb, 0x6e, 0x79, 0x38, 0x3e, 0xc1, 0x89, 0xfd, 0xdf, 0x39, 0xb0, 0x31,
	0xb5, 0x24, 0x7e, 0x64, 0x22, 0xdf, 0x06, 0xa5, 0xe7, 0x5d, 0xf1, 0xde, 0xca, 0xe7, 0x71, 0xee,
	0xa9, 0x97, 0x03, 0x6d, 0x17, 0xc8, 0x91, 0x72, 0xbc, 0x0b, 0x56, 0x64, 0xc8, 0x98, 0xd1, 0x5e,
	0x5f, 0x7b, 0xcf, 0x48, 0xef, 0x9d, 0x41, 0x6a, 0x6d, 0xe6, 0x16, 0xcd, 0x59, 0xd8, 0xee, 0x92,
	0x98, 0x6a, 0x88, 0x19, 0x15, 0xe6, 0x0f, 0x60, 0x55, 0x2d, 0x91, 0x8f, 0x33, 0x2b, 0xe3, 0x5c,
	0x19, 0xa4, 0x96, 0x99, 0x67, 0x31, 0x16, 0x68, 0x59, 0xce, 0xe5, 0x22, 0xdd, 0x00, 0x0b, 0x31,
	0xa5, 0x1d, 0x8f, 0x04, 0xe6, 0x9c, 0xbc, 0xef, 0x70, 0x90, 0x5a, 0x4b, 0xca, 0x5f, 0x03, 0xb6,
	0x3b, 0x2f, 0xbe, 0xee, 0x07, 0xf0, 0xaf, 0x60, 0x0b, 0xf7, 0x12, 0xcc, 0x22, 0xaf, 0x43, 0x9e,
	0x77, 0x49, 0x40, 0x92, 0xfe, 0xb0, 0xef, 0xe8, 0xc7, 0xd1, 0xd5, 0x41, 0x6a, 0xed, 0x66, 0x45,
	0xe9, 0x02, 0x53, 0xdb, 0xdd, 0x54, 0xd8, 0x83, 0x0c, 0xca, 0xce, 0x03, 0x3e, 0x01, 0x9b, 0x3e,
	0xeb, 0xc7, 0x09, 0xf5, 0x7c, 0x1a, 0xc6, 0x88, 0x89, 0x7a, 0xae, 0x6e, 0x8e, 0x7c, 0x19, 0x15,
	0x1d, 0x3b, 0xd7, 0xff, 0xa6, 0x1b, 0xda, 0xee, 0x86, 0x42, 0x8e, 0x14, 0x90, 0xe5, 0x1f, 0x6c,
	0x82, 0xb2, 0xec, 0x94, 0x28, 0x08, 0x18, 0xe6, 0xdc, 0x5c, 0x94, 0x59, 0x67, 0x4f, 0x34, 0x34,
	0x71, 0x3d, 0xee, 0x28, 0x8b, 0x8c, 0x95, 0xb3, 0x33, 0xfe, 0x14, 0xce, 0x47, 0xb1, 0xdd, 0x52,
	0x3c, 0xf2, 0x80, 0x07, 0xa0, 0x38, 0xea, 0xed, 0x45, 0x79, 0x47, 0xd7, 0x07, 0xa9, 0xb5, 0xa2,
	0x1d, 0x87, 0x3d, 0xda, 0x1d, 0x99, 0x4d, 0x64, 0xdb, 0x3f, 0x0c, 0xb0, 0x36, 0x85, 0x03, 0xfc,
	0x05, 0x58, 0xc8, 0x88, 0xab, 0x5b, 0x9a, 0x3b, 0xa8, 0x21, 0x97, 0xcc, 0x04, 0xde, 0x03, 0x2b,
	0xfa, 0x73, 0x74, 0x40, 0x97, 0x26, 0xef, 0xd9, 0xa4, 0x85, 0xed, 0x2e, 0xa3, 0xf1, 0x55, 0xed,
	0x7f, 0x19, 0x60, 0xfb, 0xe2, 0xb6, 0xfc, 0x91, 0xd9, 0x73, 0x00, 0x8a, 0x93, 0x7f, 0x75, 0x72,
	0x22, 0xe5, 0xfe, 0xc2, 0x8c, 0xcc, 0x26, 0x44, 0xfa, 0x9b, 0x01, 0x96, 0xe5, 0xbf, 0xae, 0x3f,
	0xc5, 0x81, 0x68, 0x07, 0x1d, 0x14, 0x41, 0x08, 0x66, 0x4f, 0x71, 0x5f, 0x15, 0xd3, 0xa2, 0x2b,
	0xbf, 0xe1, 0x65, 0x30, 0xdf, 0xc6, 0xa4, 0xd5, 0x4e, 0xe4, 0x32, 0x33, 0xae, 0x1e, 0xc1, 0x5f,
	0x83, 0x05, 0x75, 0x29, 0xb8, 0xcc, 0xbe, 0xd2, 0xc1, 0xc6, 0x7b, 0xb7, 0x40, 0xfc, 0xa5, 0x73,
	0x66, 0xc5, 0xc1, 0xbb, 0x99, 0xed, 0x18, 0x09, 0xc3, 0xf9, 0xfd, 0xab, 0xaf, 0xaa, 0x85, 0x57,
	0x6f, 0xab, 0xc6, 0xeb, 0xb7, 0x55, 0xe3, 0xcb, 0xb7, 0x55, 0xe3, 0x9f, 0xef, 0xaa, 0x85, 0xd7,
	0xef, 0xaa, 0x85, 0xcf, 0xdf, 0x55, 0x0b, 0x4f, 0xae, 0xe5, 0xea, 0x34, 0x7d, 0x46, 0xf7, 0x23,
	0x9c, 0x9c, 0x53, 0x76, 0x2a, 0xbe, 0xeb, 0xbd, 0xec, 0x2f, 0xa9, 0x2c, 0xd7, 0xcd, 0x79, 0xf9,
	0x57, 0xf2, 0xd6, 0xb7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x24, 0xd9, 0x28, 0x59, 0xad, 0x0e, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if !this.VoteThreshold.Equal(that1.VoteThreshold) {
		return false
	}
	if len(this.RewardBands) != len(that1.RewardBands) {
		return false
	}
	for i := range this.RewardBands {
		if !this.RewardBands[i].Equal(&that1.RewardBands[i]) {
			return false
		}
	}
	if this.RewardDistributionWindow != that1.RewardDistributionWindow {
		return false
	}
	if len(this.AcceptList) != len(that1.AcceptList) {
		return false
	}
	for i := range this.AcceptList {
		if !this.AcceptList[i].Equal(&that1.AcceptList[i]) {
			return false
		}
	}
	if !this.SlashFraction.Equal(that1.SlashFraction) {
		return false
	}
	if this.SlashWindow != that1.SlashWindow {
		return false
	}
	if !this.MinValidPerWindow.Equal(that1.MinValidPerWindow) {
		return false
	}
	if len(this.MandatoryList) != len(that1.MandatoryList) {
		return false
	}
	for i := range this.MandatoryList {
		if !this.MandatoryList[i].Equal(&that1.MandatoryList[i]) {
			return false
		}
	}
	if this.HistoricStampPeriod != that1.HistoricStampPeriod {
		return false
	}
	if this.MedianStampPeriod != that1.MedianStampPeriod {
		return false
	}
	if this.MaximumPriceStamps != that1.MaximumPriceStamps {
		return false
	}
	if this.MaximumMedianStamps != that1.MaximumMedianStamps {
		return false
	}
	if len(this.CurrencyPairProviders) != len(that1.CurrencyPairProviders) {
		return false
	}
	for i := range this.CurrencyPairProviders {
		if !this.CurrencyPairProviders[i].Equal(&that1.CurrencyPairProviders[i]) {
			return false
		}
	}
	if len(this.CurrencyDeviationThresholds) != len(that1.CurrencyDeviationThresholds) {
		return false
	}
	for i := range this.CurrencyDeviationThresholds {
		if !this.CurrencyDeviationThresholds[i].Equal(&that1.CurrencyDeviationThresholds[i]) {
			return false
		}
	}
	if this.PriceExpiryTime != that1.PriceExpiryTime {
		return false
	}
	if this.LifeTimeInBlocks != that1.LifeTimeInBlocks {
		return false
	}
	return true
}
func (this *ParamUpdatePlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParamUpdatePlan)
	if !ok {
		that2, ok := that.(ParamUpdatePlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	if this.Height != that1.Height {
		return false
	}
	if !this.Changes.Equal(&that1.Changes) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LifeTimeInBlocks != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.LifeTimeInBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PriceExpiryTime != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.PriceExpiryTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.CurrencyDeviationThresholds) > 0 {
		for iNdEx := len(m.CurrencyDeviationThresholds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrencyDeviationThresholds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.CurrencyPairProviders) > 0 {
		for iNdEx := len(m.CurrencyPairProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrencyPairProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.MaximumMedianStamps != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.MaximumMedianStamps))
		i--
		dAtA[i] = 0x68
	}
	if m.MaximumPriceStamps != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.MaximumPriceStamps))
		i--
		dAtA[i] = 0x60
	}
	if m.MedianStampPeriod != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.MedianStampPeriod))
		i--
		dAtA[i] = 0x58
	}
	if m.HistoricStampPeriod != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.HistoricStampPeriod))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MandatoryList) > 0 {
		for iNdEx := len(m.MandatoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MandatoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.MinValidPerWindow.Size()
		i -= size
		if _, err := m.MinValidPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.SlashWindow != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.SlashWindow))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.AcceptList) > 0 {
		for iNdEx := len(m.AcceptList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RewardDistributionWindow != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.RewardDistributionWindow))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RewardBands) > 0 {
		for iNdEx := len(m.RewardBands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardBands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.VoteThreshold.Size()
		i -= size
		if _, err := m.VoteThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VotePeriod != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Denom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Denom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Denom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exponent != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SymbolDenom) > 0 {
		i -= len(m.SymbolDenom)
		copy(dAtA[i:], m.SymbolDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.SymbolDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardBand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardBand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardBand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardBand.Size()
		i -= size
		if _, err := m.RewardBand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SymbolDenom) > 0 {
		i -= len(m.SymbolDenom)
		copy(dAtA[i:], m.SymbolDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.SymbolDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateExchangeRatePrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateExchangeRatePrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateExchangeRatePrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubmitBlock != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.SubmitBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateExchangeRateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateExchangeRateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateExchangeRateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PriceStamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceStamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceStamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNum != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x10
	}
	if m.ExchangeRate != nil {
		{
			size, err := m.ExchangeRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorRewardSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorRewardSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorRewardSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for iNdEx := len(m.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorSet[iNdEx])
			copy(dAtA[i:], m.ValidatorSet[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.ValidatorSet[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CurrencyPairProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyPairProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrencyPairProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PairAddress) > 0 {
		for iNdEx := len(m.PairAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CryptoCompareExchange) > 0 {
		i -= len(m.CryptoCompareExchange)
		copy(dAtA[i:], m.CryptoCompareExchange)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.CryptoCompareExchange)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternLiquidityProvider) > 0 {
		i -= len(m.ExternLiquidityProvider)
		copy(dAtA[i:], m.ExternLiquidityProvider)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.ExternLiquidityProvider)))
		i--
		dAtA[i] = 0x32
	}
	if m.PoolId != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.QuoteProxyDenom) > 0 {
		i -= len(m.QuoteProxyDenom)
		copy(dAtA[i:], m.QuoteProxyDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.QuoteProxyDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseProxyDenom) > 0 {
		i -= len(m.BaseProxyDenom)
		copy(dAtA[i:], m.BaseProxyDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.BaseProxyDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairAddressProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairAddressProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairAddressProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressProvider) > 0 {
		i -= len(m.AddressProvider)
		copy(dAtA[i:], m.AddressProvider)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.AddressProvider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrencyDeviationThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyDeviationThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrencyDeviationThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParamUpdatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamUpdatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamUpdatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Changes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Height != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePeriod != 0 {
		n += 1 + sovOracle(uint64(m.VotePeriod))
	}
	l = m.VoteThreshold.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.RewardBands) > 0 {
		for _, e := range m.RewardBands {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.RewardDistributionWindow != 0 {
		n += 1 + sovOracle(uint64(m.RewardDistributionWindow))
	}
	if len(m.AcceptList) > 0 {
		for _, e := range m.AcceptList {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = m.SlashFraction.Size()
	n += 1 + l + sovOracle(uint64(l))
	if m.SlashWindow != 0 {
		n += 1 + sovOracle(uint64(m.SlashWindow))
	}
	l = m.MinValidPerWindow.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.MandatoryList) > 0 {
		for _, e := range m.MandatoryList {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.HistoricStampPeriod != 0 {
		n += 1 + sovOracle(uint64(m.HistoricStampPeriod))
	}
	if m.MedianStampPeriod != 0 {
		n += 1 + sovOracle(uint64(m.MedianStampPeriod))
	}
	if m.MaximumPriceStamps != 0 {
		n += 1 + sovOracle(uint64(m.MaximumPriceStamps))
	}
	if m.MaximumMedianStamps != 0 {
		n += 1 + sovOracle(uint64(m.MaximumMedianStamps))
	}
	if len(m.CurrencyPairProviders) > 0 {
		for _, e := range m.CurrencyPairProviders {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.CurrencyDeviationThresholds) > 0 {
		for _, e := range m.CurrencyDeviationThresholds {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.PriceExpiryTime != 0 {
		n += 2 + sovOracle(uint64(m.PriceExpiryTime))
	}
	if m.LifeTimeInBlocks != 0 {
		n += 2 + sovOracle(uint64(m.LifeTimeInBlocks))
	}
	return n
}

func (m *Denom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.SymbolDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovOracle(uint64(m.Exponent))
	}
	return n
}

func (m *RewardBand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SymbolDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.RewardBand.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *AggregateExchangeRatePrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.SubmitBlock != 0 {
		n += 1 + sovOracle(uint64(m.SubmitBlock))
	}
	return n
}

func (m *AggregateExchangeRateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *PriceStamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExchangeRate != nil {
		l = m.ExchangeRate.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.BlockNum != 0 {
		n += 1 + sovOracle(uint64(m.BlockNum))
	}
	return n
}

func (m *ValidatorRewardSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for _, s := range m.ValidatorSet {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *CurrencyPairProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.BaseProxyDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.QuoteProxyDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovOracle(uint64(m.PoolId))
	}
	l = len(m.ExternLiquidityProvider)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.CryptoCompareExchange)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.PairAddress) > 0 {
		for _, e := range m.PairAddress {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *PairAddressProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.AddressProvider)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *CurrencyDeviationThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *ParamUpdatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovOracle(uint64(m.Height))
	}
	l = m.Changes.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardBands = append(m.RewardBands, RewardBand{})
			if err := m.RewardBands[len(m.RewardBands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDistributionWindow", wireType)
			}
			m.RewardDistributionWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDistributionWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptList = append(m.AcceptList, Denom{})
			if err := m.AcceptList[len(m.AcceptList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashWindow", wireType)
			}
			m.SlashWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidPerWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinValidPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MandatoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MandatoryList = append(m.MandatoryList, Denom{})
			if err := m.MandatoryList[len(m.MandatoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricStampPeriod", wireType)
			}
			m.HistoricStampPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricStampPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianStampPeriod", wireType)
			}
			m.MedianStampPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedianStampPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPriceStamps", wireType)
			}
			m.MaximumPriceStamps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPriceStamps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumMedianStamps", wireType)
			}
			m.MaximumMedianStamps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumMedianStamps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPairProviders = append(m.CurrencyPairProviders, CurrencyPairProviders{})
			if err := m.CurrencyPairProviders[len(m.CurrencyPairProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyDeviationThresholds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyDeviationThresholds = append(m.CurrencyDeviationThresholds, CurrencyDeviationThreshold{})
			if err := m.CurrencyDeviationThresholds[len(m.CurrencyDeviationThresholds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceExpiryTime", wireType)
			}
			m.PriceExpiryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceExpiryTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeTimeInBlocks", wireType)
			}
			m.LifeTimeInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifeTimeInBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Denom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Denom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Denom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardBand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardBand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardBand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardBand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateExchangeRatePrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateExchangeRatePrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateExchangeRatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitBlock", wireType)
			}
			m.SubmitBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateExchangeRateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateExchangeRateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateExchangeRateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, types.DecCoin{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceStamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceStamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceStamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeRate == nil {
				m.ExchangeRate = &types.DecCoin{}
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorRewardSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorRewardSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorRewardSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSet = append(m.ValidatorSet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyPairProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyPairProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyPairProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseProxyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseProxyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteProxyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteProxyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternLiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternLiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoCompareExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CryptoCompareExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairAddress = append(m.PairAddress, PairAddressProvider{})
			if err := m.PairAddress[len(m.PairAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairAddressProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairAddressProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairAddressProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyDeviationThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyDeviationThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyDeviationThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamUpdatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamUpdatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamUpdatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Changes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
