// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/gasestimate/v1/gasestimate.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the gasestimate module.
type Params struct {
	// The contracts we'll send gasestimate messages to.
	ContractRegistry []*Contract `protobuf:"bytes,1,rep,name=contract_registry,json=contractRegistry,proto3" json:"contract_registry,omitempty"`
	// The gas limit for the gasestimate messages. E.x., "1000000"
	GasLimit string `protobuf:"bytes,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// The gas adjustment multiplier for the gasestimate messages. E.x., "1.5"
	GasAdjustment string `protobuf:"bytes,3,opt,name=gas_adjustment,json=gasAdjustment,proto3" json:"gas_adjustment,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6bf005bd9acf66, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Contract defines a contract at a specific address and network that we send gasestimate messages to.
type Contract struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6bf005bd9acf66, []int{1}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

// GasEstimate is the gas estimate for a given network.
type GasEstimate struct {
	Network     string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	GasEstimate int64  `protobuf:"varint,2,opt,name=gas_estimate,json=gasEstimate,proto3" json:"gas_estimate,omitempty"`
}

func (m *GasEstimate) Reset()         { *m = GasEstimate{} }
func (m *GasEstimate) String() string { return proto.CompactTextString(m) }
func (*GasEstimate) ProtoMessage()    {}
func (*GasEstimate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6bf005bd9acf66, []int{2}
}
func (m *GasEstimate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasEstimate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasEstimate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasEstimate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasEstimate.Merge(m, src)
}
func (m *GasEstimate) XXX_Size() int {
	return m.Size()
}
func (m *GasEstimate) XXX_DiscardUnknown() {
	xxx_messageInfo_GasEstimate.DiscardUnknown(m)
}

var xxx_messageInfo_GasEstimate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "ojo.gasestimate.v1.Params")
	proto.RegisterType((*Contract)(nil), "ojo.gasestimate.v1.Contract")
	proto.RegisterType((*GasEstimate)(nil), "ojo.gasestimate.v1.GasEstimate")
}

func init() {
	proto.RegisterFile("ojo/gasestimate/v1/gasestimate.proto", fileDescriptor_6d6bf005bd9acf66)
}

var fileDescriptor_6d6bf005bd9acf66 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xbb, 0x92, 0x20, 0x2c, 0x6a, 0x74, 0xe3, 0xa1, 0x51, 0xb3, 0x41, 0xa2, 0x09, 0x17,
	0xdb, 0xa0, 0x77, 0x13, 0x35, 0xc6, 0x68, 0x38, 0x98, 0x1e, 0xbd, 0x90, 0x05, 0x36, 0x6b, 0xab,
	0x65, 0xc8, 0xce, 0x80, 0xf2, 0x16, 0xde, 0x7c, 0x25, 0x8e, 0x1c, 0x3d, 0x2a, 0xbc, 0x88, 0xd9,
	0xda, 0x2a, 0xc4, 0xdb, 0xfc, 0x33, 0xdf, 0xff, 0xcf, 0xb4, 0xcb, 0x8f, 0x20, 0x81, 0xd0, 0x28,
	0xd4, 0x48, 0x71, 0xaa, 0x48, 0x87, 0xe3, 0xd6, 0xb2, 0x0c, 0x86, 0x16, 0x08, 0x84, 0x80, 0x04,
	0x82, 0xe5, 0xf6, 0xb8, 0xb5, 0xb7, 0x6b, 0xc0, 0x40, 0x36, 0x0e, 0x5d, 0xf5, 0x43, 0x36, 0xde,
	0x19, 0x2f, 0xdf, 0x2b, 0xab, 0x52, 0x14, 0xb7, 0x7c, 0xa7, 0x07, 0x03, 0xb2, 0xaa, 0x47, 0x1d,
	0xab, 0x4d, 0x8c, 0x64, 0x27, 0x3e, 0xab, 0x97, 0x9a, 0xb5, 0xd3, 0x83, 0xe0, 0x7f, 0x60, 0x70,
	0x95, 0xc3, 0xd1, 0x76, 0x61, 0x8b, 0x72, 0x97, 0xd8, 0xe7, 0x55, 0xa3, 0xb0, 0xf3, 0x1c, 0xa7,
	0x31, 0xf9, 0x6b, 0x75, 0xd6, 0xac, 0x46, 0x15, 0xa3, 0xb0, 0xed, 0xb4, 0x38, 0xe6, 0x5b, 0x6e,
	0xa8, 0xfa, 0xc9, 0x08, 0x29, 0xd5, 0x03, 0xf2, 0x4b, 0x19, 0xb1, 0x69, 0x14, 0x5e, 0xfc, 0x36,
	0x1b, 0xe7, 0xbc, 0x52, 0x6c, 0x10, 0x3e, 0x5f, 0x57, 0xfd, 0xbe, 0xd5, 0x88, 0x3e, 0xcb, 0xd8,
	0x42, 0xba, 0xc9, 0x40, 0xd3, 0x0b, 0xd8, 0xa7, 0x7c, 0x4f, 0x21, 0x1b, 0x77, 0xbc, 0x76, 0xa3,
	0xf0, 0x3a, 0x3f, 0x78, 0x19, 0x64, 0x2b, 0xa0, 0x38, 0xe4, 0x1b, 0xee, 0x9e, 0xe2, 0xd3, 0xb2,
	0x9c, 0x52, 0x54, 0x33, 0x7f, 0xe6, 0xcb, 0xf6, 0xf4, 0x4b, 0x7a, 0xd3, 0xb9, 0x64, 0xb3, 0xb9,
	0x64, 0x9f, 0x73, 0xc9, 0xde, 0x16, 0xd2, 0x9b, 0x2d, 0xa4, 0xf7, 0xb1, 0x90, 0xde, 0x43, 0x60,
	0x62, 0x7a, 0x1c, 0x75, 0x83, 0x1e, 0xa4, 0x21, 0x24, 0x70, 0x92, 0x07, 0xbb, 0x3a, 0x7c, 0x5d,
	0x79, 0x2c, 0x9a, 0x0c, 0x35, 0x76, 0xcb, 0xd9, 0xaf, 0x3f, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x53, 0x40, 0x5a, 0x05, 0xcc, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasAdjustment) > 0 {
		i -= len(m.GasAdjustment)
		copy(dAtA[i:], m.GasAdjustment)
		i = encodeVarintGasestimate(dAtA, i, uint64(len(m.GasAdjustment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintGasestimate(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractRegistry) > 0 {
		for iNdEx := len(m.ContractRegistry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractRegistry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGasestimate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintGasestimate(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGasestimate(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasEstimate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasEstimate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasEstimate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasEstimate != 0 {
		i = encodeVarintGasestimate(dAtA, i, uint64(m.GasEstimate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintGasestimate(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGasestimate(dAtA []byte, offset int, v uint64) int {
	offset -= sovGasestimate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractRegistry) > 0 {
		for _, e := range m.ContractRegistry {
			l = e.Size()
			n += 1 + l + sovGasestimate(uint64(l))
		}
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovGasestimate(uint64(l))
	}
	l = len(m.GasAdjustment)
	if l > 0 {
		n += 1 + l + sovGasestimate(uint64(l))
	}
	return n
}

func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGasestimate(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovGasestimate(uint64(l))
	}
	return n
}

func (m *GasEstimate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovGasestimate(uint64(l))
	}
	if m.GasEstimate != 0 {
		n += 1 + sovGasestimate(uint64(m.GasEstimate))
	}
	return n
}

func sovGasestimate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGasestimate(x uint64) (n int) {
	return sovGasestimate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGasestimate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRegistry = append(m.ContractRegistry, &Contract{})
			if err := m.ContractRegistry[len(m.ContractRegistry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAdjustment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasAdjustment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGasestimate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGasestimate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGasestimate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGasestimate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGasestimate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasEstimate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGasestimate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasEstimate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasEstimate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasestimate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasestimate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasEstimate", wireType)
			}
			m.GasEstimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasEstimate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGasestimate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGasestimate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGasestimate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGasestimate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasestimate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGasestimate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGasestimate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGasestimate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGasestimate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGasestimate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGasestimate = fmt.Errorf("proto: unexpected end of group")
)
